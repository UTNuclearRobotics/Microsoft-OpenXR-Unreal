// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Microsoft_Azure_ObjectAnchors_H
#define WINRT_Microsoft_Azure_ObjectAnchors_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.201217.4"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.201217.4"
#include "winrt/impl/Microsoft.Azure.ObjectAnchors.SpatialGraph.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Microsoft.Azure.ObjectAnchors.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(winrt::guid) consume_Microsoft_Azure_ObjectAnchors_IAccountInformation<D>::AccountId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IAccountInformation)->get_AccountId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Azure_ObjectAnchors_IAccountInformation<D>::AccountDomain() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IAccountInformation)->get_AccountDomain(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::AccountInformation) consume_Microsoft_Azure_ObjectAnchors_IAccountInformationFactory<D>::CreateInstance(winrt::guid const& accountId, param::hstring const& accountKey, param::hstring const& accountDomain) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IAccountInformationFactory)->CreateInstance(impl::bind_in(accountId), *(void**)(&accountKey), *(void**)(&accountDomain), &value));
        return Microsoft::Azure::ObjectAnchors::AccountInformation{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::DateTime) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::LastUpdatedTime() const
    {
        Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->get_LastUpdatedTime(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphLocation) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::Origin() const
    {
        Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphLocation value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->get_Origin(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::VertexCount() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->get_VertexCount(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::TriangleIndexCount() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->get_TriangleIndexCount(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::GetVertexPositions(array_view<Windows::Foundation::Numerics::float3> vertices) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->GetVertexPositions(vertices.size(), put_abi(vertices)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::GetVertexNormals(array_view<Windows::Foundation::Numerics::float3> normals) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->GetVertexNormals(normals.size(), put_abi(normals)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IEnvironmentObservation<D>::GetTriangleIndices(array_view<uint32_t> indices) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IEnvironmentObservation)->GetTriangleIndices(indices.size(), put_abi(indices)));
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectObserver) consume_Microsoft_Azure_ObjectAnchors_IObjectAnchorsSession<D>::CreateObjectObserver() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectAnchorsSession)->CreateObjectObserver(&result));
        return Microsoft::Azure::ObjectAnchors::ObjectObserver{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectAnchorsSession) consume_Microsoft_Azure_ObjectAnchors_IObjectAnchorsSessionFactory<D>::CreateInstance(Microsoft::Azure::ObjectAnchors::AccountInformation const& accountInformation) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectAnchorsSessionFactory)->CreateInstance(*(void**)(&accountInformation), &value));
        return Microsoft::Azure::ObjectAnchors::ObjectAnchorsSession{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::guid) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::ModelId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->get_ModelId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectInstanceTrackingMode) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::Mode() const
    {
        Microsoft::Azure::ObjectAnchors::ObjectInstanceTrackingMode value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->get_Mode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::Mode(Microsoft::Azure::ObjectAnchors::ObjectInstanceTrackingMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->put_Mode(static_cast<int32_t>(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::Changed(Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedHandler const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->add_Changed(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::Changed_revoker consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::Changed(auto_revoke_t, Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedHandler const& handler) const
    {
        return impl::make_event_revoker<D, Changed_revoker>(this, Changed(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::Changed(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->remove_Changed(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IReference<Microsoft::Azure::ObjectAnchors::ObjectInstanceState>) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::TryGetCurrentState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->TryGetCurrentState(&result));
        return Windows::Foundation::IReference<Microsoft::Azure::ObjectAnchors::ObjectInstanceState>{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectInstancePlacement) consume_Microsoft_Azure_ObjectAnchors_IObjectInstance<D>::TryGetCurrentPlacement(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& referenceCoordinateSystem) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstance)->TryGetCurrentPlacement(impl::bind_in(referenceCoordinateSystem), &result));
        return Microsoft::Azure::ObjectAnchors::ObjectInstancePlacement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectInstanceState) consume_Microsoft_Azure_ObjectAnchors_IObjectInstancePlacement<D>::State() const
    {
        Microsoft::Azure::ObjectAnchors::ObjectInstanceState value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement)->get_State(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose) consume_Microsoft_Azure_ObjectAnchors_IObjectInstancePlacement<D>::ComputeModelPoseForView(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose const& viewInWorld, Windows::Foundation::Numerics::float4x4 const& worldToReference) const
    {
        Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement)->ComputeModelPoseForView(impl::bind_in(viewInWorld), impl::bind_in(worldToReference), put_abi(result)));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::guid) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::Id() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->get_Id(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::BoundingBox() const
    {
        Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->get_BoundingBox(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::Numerics::float4x4) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::OriginToCenterTransform() const
    {
        Windows::Foundation::Numerics::float4x4 value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->get_OriginToCenterTransform(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::VertexCount() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->get_VertexCount(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::TriangleIndexCount() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->get_TriangleIndexCount(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::GetVertexPositions(array_view<Windows::Foundation::Numerics::float3> vertices) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->GetVertexPositions(vertices.size(), put_abi(vertices)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::GetVertexNormals(array_view<Windows::Foundation::Numerics::float3> normals) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->GetVertexNormals(normals.size(), put_abi(normals)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectModel<D>::GetTriangleIndices(array_view<uint32_t> indices) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectModel)->GetTriangleIndices(indices.size(), put_abi(indices)));
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectModel>) consume_Microsoft_Azure_ObjectAnchors_IObjectObserver<D>::LoadObjectModelAsync(array_view<uint8_t const> buffer) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectObserver)->LoadObjectModelAsync(buffer.size(), get_abi(buffer), &operation));
        return Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectModel>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectInstance>>) consume_Microsoft_Azure_ObjectAnchors_IObjectObserver<D>::DetectAsync(Microsoft::Azure::ObjectAnchors::ObjectQuery const& query) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectObserver)->DetectAsync(*(void**)(&query), &operation));
        return Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectInstance>>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectInstance>>) consume_Microsoft_Azure_ObjectAnchors_IObjectObserver<D>::DetectAsync(array_view<Microsoft::Azure::ObjectAnchors::ObjectQuery const> queries) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectObserver)->DetectAsync2(queries.size(), get_abi(queries), &operation));
        return Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectInstance>>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_Azure_ObjectAnchors_IObjectObserverStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectObserverStatics)->IsSupported(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectObserverAccessStatus>) consume_Microsoft_Azure_ObjectAnchors_IObjectObserverStatics<D>::RequestAccessAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectObserverStatics)->RequestAccessAsync(&operation));
        return Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectObserverAccessStatus>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::MinSurfaceCoverage() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->get_MinSurfaceCoverage(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::MinSurfaceCoverage(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->put_MinSurfaceCoverage(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::IsExpectedToBeStandingOnGroundPlane() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->get_IsExpectedToBeStandingOnGroundPlane(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::IsExpectedToBeStandingOnGroundPlane(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->put_IsExpectedToBeStandingOnGroundPlane(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::ExpectedMaxVerticalOrientationInDegrees() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->get_ExpectedMaxVerticalOrientationInDegrees(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::ExpectedMaxVerticalOrientationInDegrees(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->put_ExpectedMaxVerticalOrientationInDegrees(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::MaxScaleChange() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->get_MaxScaleChange(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::MaxScaleChange(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->put_MaxScaleChange(value));
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::SearchAreas() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->get_SearchAreas(&value));
        return Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::EnvironmentObservation>) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::ComputeLatestEnvironmentObservationAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->ComputeLatestEnvironmentObservationAsync(&operation));
        return Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::EnvironmentObservation>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::EnvironmentObservation>) consume_Microsoft_Azure_ObjectAnchors_IObjectQuery<D>::ComputeLatestEnvironmentObservationAsync(Microsoft::Azure::ObjectAnchors::EnvironmentObservationTopology const& topology) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQuery)->ComputeLatestEnvironmentObservationAsync2(static_cast<int32_t>(topology), &operation));
        return Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::EnvironmentObservation>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectQuery) consume_Microsoft_Azure_ObjectAnchors_IObjectQueryFactory<D>::CreateInstance(Microsoft::Azure::ObjectAnchors::ObjectModel const& model) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQueryFactory)->CreateInstance(*(void**)(&model), &value));
        return Microsoft::Azure::ObjectAnchors::ObjectQuery{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectQuery) consume_Microsoft_Azure_ObjectAnchors_IObjectQueryFactory<D>::CreateInstance2(Microsoft::Azure::ObjectAnchors::ObjectModel const& model, Microsoft::Azure::ObjectAnchors::ObjectObservationMode const& observationMode) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectQueryFactory)->CreateInstance2(*(void**)(&model), static_cast<int32_t>(observationMode), &value));
        return Microsoft::Azure::ObjectAnchors::ObjectQuery{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectSearchArea) consume_Microsoft_Azure_ObjectAnchors_IObjectSearchAreaStatics<D>::FromLocation(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Windows::Foundation::Numerics::float3 const& position, Windows::Foundation::Numerics::quaternion const& orientation) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics)->FromLocation(impl::bind_in(coordinateSystem), impl::bind_in(position), impl::bind_in(orientation), &result));
        return Microsoft::Azure::ObjectAnchors::ObjectSearchArea{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectSearchArea) consume_Microsoft_Azure_ObjectAnchors_IObjectSearchAreaStatics<D>::FromFieldOfView(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialFieldOfView const& fieldOfView) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics)->FromFieldOfView(impl::bind_in(coordinateSystem), impl::bind_in(fieldOfView), &result));
        return Microsoft::Azure::ObjectAnchors::ObjectSearchArea{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectSearchArea) consume_Microsoft_Azure_ObjectAnchors_IObjectSearchAreaStatics<D>::FromOrientedBox(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox const& bounds) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics)->FromOrientedBox(impl::bind_in(coordinateSystem), impl::bind_in(bounds), &result));
        return Microsoft::Azure::ObjectAnchors::ObjectSearchArea{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Microsoft::Azure::ObjectAnchors::ObjectSearchArea) consume_Microsoft_Azure_ObjectAnchors_IObjectSearchAreaStatics<D>::FromSphere(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialSphere const& sphere) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics)->FromSphere(impl::bind_in(coordinateSystem), impl::bind_in(sphere), &result));
        return Microsoft::Azure::ObjectAnchors::ObjectSearchArea{ result, take_ownership_from_abi };
    }
    template <typename H> struct delegate<Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedHandler, H> final : implements_delegate<Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedHandler, H>
    {
        delegate(H&& handler) : implements_delegate<Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedHandler, H>(std::forward<H>(handler)) {}

        int32_t __stdcall Invoke(void* sender, void* args) noexcept final try
        {
            (*this)(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&sender), *reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedEventArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IAccountInformation> : produce_base<D, Microsoft::Azure::ObjectAnchors::IAccountInformation>
    {
        int32_t __stdcall get_AccountId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().AccountId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AccountDomain(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AccountDomain());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IAccountInformationFactory> : produce_base<D, Microsoft::Azure::ObjectAnchors::IAccountInformationFactory>
    {
        int32_t __stdcall CreateInstance(winrt::guid accountId, void* accountKey, void* accountDomain, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::AccountInformation>(this->shim().CreateInstance(*reinterpret_cast<winrt::guid const*>(&accountId), *reinterpret_cast<hstring const*>(&accountKey), *reinterpret_cast<hstring const*>(&accountDomain)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IEnvironmentObservation> : produce_base<D, Microsoft::Azure::ObjectAnchors::IEnvironmentObservation>
    {
        int32_t __stdcall get_LastUpdatedTime(int64_t* value) noexcept final try
        {
            zero_abi<Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::DateTime>(this->shim().LastUpdatedTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Origin(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialGraphLocation* value) noexcept final try
        {
            zero_abi<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphLocation>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphLocation>(this->shim().Origin());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VertexCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().VertexCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TriangleIndexCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TriangleIndexCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVertexPositions(uint32_t __verticesSize, Windows::Foundation::Numerics::float3* vertices) noexcept final try
        {
            zero_abi<Windows::Foundation::Numerics::float3>(vertices, __verticesSize);
            typename D::abi_guard guard(this->shim());
            this->shim().GetVertexPositions(array_view<Windows::Foundation::Numerics::float3>(reinterpret_cast<Windows::Foundation::Numerics::float3*>(vertices), reinterpret_cast<Windows::Foundation::Numerics::float3*>(vertices) + __verticesSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVertexNormals(uint32_t __normalsSize, Windows::Foundation::Numerics::float3* normals) noexcept final try
        {
            zero_abi<Windows::Foundation::Numerics::float3>(normals, __normalsSize);
            typename D::abi_guard guard(this->shim());
            this->shim().GetVertexNormals(array_view<Windows::Foundation::Numerics::float3>(reinterpret_cast<Windows::Foundation::Numerics::float3*>(normals), reinterpret_cast<Windows::Foundation::Numerics::float3*>(normals) + __normalsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTriangleIndices(uint32_t __indicesSize, uint32_t* indices) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GetTriangleIndices(array_view<uint32_t>(reinterpret_cast<uint32_t*>(indices), reinterpret_cast<uint32_t*>(indices) + __indicesSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectAnchorsSession> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectAnchorsSession>
    {
        int32_t __stdcall CreateObjectObserver(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::ObjectObserver>(this->shim().CreateObjectObserver());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectAnchorsSessionFactory> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectAnchorsSessionFactory>
    {
        int32_t __stdcall CreateInstance(void* accountInformation, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::ObjectAnchorsSession>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::AccountInformation const*>(&accountInformation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectInstance> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectInstance>
    {
        int32_t __stdcall get_ModelId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().ModelId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Mode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::ObjectInstanceTrackingMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Mode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Mode(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectInstanceTrackingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_Changed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Changed(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Changed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Changed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall TryGetCurrentState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Foundation::IReference<Microsoft::Azure::ObjectAnchors::ObjectInstanceState>>(this->shim().TryGetCurrentState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryGetCurrentPlacement(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialGraphCoordinateSystem referenceCoordinateSystem, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::ObjectInstancePlacement>(this->shim().TryGetCurrentPlacement(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const*>(&referenceCoordinateSystem)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectInstanceChangedEventArgs> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectInstanceChangedEventArgs>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement>
    {
        int32_t __stdcall get_State(struct struct_Microsoft_Azure_ObjectAnchors_ObjectInstanceState* value) noexcept final try
        {
            zero_abi<Microsoft::Azure::ObjectAnchors::ObjectInstanceState>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::ObjectInstanceState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ComputeModelPoseForView(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialPose viewInWorld, Windows::Foundation::Numerics::float4x4 worldToReference, struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialPose* result) noexcept final try
        {
            zero_abi<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose>(this->shim().ComputeModelPoseForView(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose const*>(&viewInWorld), *reinterpret_cast<Windows::Foundation::Numerics::float4x4 const*>(&worldToReference)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectModel> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectModel>
    {
        int32_t __stdcall get_Id(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BoundingBox(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialOrientedBox* value) noexcept final try
        {
            zero_abi<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox>(this->shim().BoundingBox());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_OriginToCenterTransform(Windows::Foundation::Numerics::float4x4* value) noexcept final try
        {
            zero_abi<Windows::Foundation::Numerics::float4x4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Numerics::float4x4>(this->shim().OriginToCenterTransform());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VertexCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().VertexCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TriangleIndexCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TriangleIndexCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVertexPositions(uint32_t __verticesSize, Windows::Foundation::Numerics::float3* vertices) noexcept final try
        {
            zero_abi<Windows::Foundation::Numerics::float3>(vertices, __verticesSize);
            typename D::abi_guard guard(this->shim());
            this->shim().GetVertexPositions(array_view<Windows::Foundation::Numerics::float3>(reinterpret_cast<Windows::Foundation::Numerics::float3*>(vertices), reinterpret_cast<Windows::Foundation::Numerics::float3*>(vertices) + __verticesSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVertexNormals(uint32_t __normalsSize, Windows::Foundation::Numerics::float3* normals) noexcept final try
        {
            zero_abi<Windows::Foundation::Numerics::float3>(normals, __normalsSize);
            typename D::abi_guard guard(this->shim());
            this->shim().GetVertexNormals(array_view<Windows::Foundation::Numerics::float3>(reinterpret_cast<Windows::Foundation::Numerics::float3*>(normals), reinterpret_cast<Windows::Foundation::Numerics::float3*>(normals) + __normalsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTriangleIndices(uint32_t __indicesSize, uint32_t* indices) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GetTriangleIndices(array_view<uint32_t>(reinterpret_cast<uint32_t*>(indices), reinterpret_cast<uint32_t*>(indices) + __indicesSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectObserver> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectObserver>
    {
        int32_t __stdcall LoadObjectModelAsync(uint32_t __bufferSize, uint8_t* buffer, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectModel>>(this->shim().LoadObjectModelAsync(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(buffer), reinterpret_cast<uint8_t const *>(buffer) + __bufferSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DetectAsync(void* query, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectInstance>>>(this->shim().DetectAsync(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectQuery const*>(&query)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DetectAsync2(uint32_t __queriesSize, void** queries, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectInstance>>>(this->shim().DetectAsync(array_view<Microsoft::Azure::ObjectAnchors::ObjectQuery const>(reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectQuery const *>(queries), reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectQuery const *>(queries) + __queriesSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectObserverStatics> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectObserverStatics>
    {
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RequestAccessAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectObserverAccessStatus>>(this->shim().RequestAccessAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectQuery> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectQuery>
    {
        int32_t __stdcall get_MinSurfaceCoverage(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinSurfaceCoverage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinSurfaceCoverage(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinSurfaceCoverage(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsExpectedToBeStandingOnGroundPlane(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsExpectedToBeStandingOnGroundPlane());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsExpectedToBeStandingOnGroundPlane(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsExpectedToBeStandingOnGroundPlane(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExpectedMaxVerticalOrientationInDegrees(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().ExpectedMaxVerticalOrientationInDegrees());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ExpectedMaxVerticalOrientationInDegrees(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ExpectedMaxVerticalOrientationInDegrees(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxScaleChange(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxScaleChange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxScaleChange(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxScaleChange(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SearchAreas(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>>(this->shim().SearchAreas());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ComputeLatestEnvironmentObservationAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::EnvironmentObservation>>(this->shim().ComputeLatestEnvironmentObservationAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ComputeLatestEnvironmentObservationAsync2(int32_t topology, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::EnvironmentObservation>>(this->shim().ComputeLatestEnvironmentObservationAsync(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::EnvironmentObservationTopology const*>(&topology)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectQueryFactory> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectQueryFactory>
    {
        int32_t __stdcall CreateInstance(void* model, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::ObjectQuery>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectModel const*>(&model)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(void* model, int32_t observationMode, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Azure::ObjectAnchors::ObjectQuery>(this->shim().CreateInstance2(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectModel const*>(&model), *reinterpret_cast<Microsoft::Azure::ObjectAnchors::ObjectObservationMode const*>(&observationMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectSearchArea> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectSearchArea>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics> : produce_base<D, Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics>
    {
        int32_t __stdcall FromLocation(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialGraphCoordinateSystem coordinateSystem, Windows::Foundation::Numerics::float3 position, Windows::Foundation::Numerics::quaternion orientation, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>(this->shim().FromLocation(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const*>(&coordinateSystem), *reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&position), *reinterpret_cast<Windows::Foundation::Numerics::quaternion const*>(&orientation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FromFieldOfView(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialGraphCoordinateSystem coordinateSystem, struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialFieldOfView fieldOfView, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>(this->shim().FromFieldOfView(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const*>(&coordinateSystem), *reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialFieldOfView const*>(&fieldOfView)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FromOrientedBox(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialGraphCoordinateSystem coordinateSystem, struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialOrientedBox bounds, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>(this->shim().FromOrientedBox(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const*>(&coordinateSystem), *reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox const*>(&bounds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FromSphere(struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialGraphCoordinateSystem coordinateSystem, struct struct_Microsoft_Azure_ObjectAnchors_SpatialGraph_SpatialSphere sphere, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Azure::ObjectAnchors::ObjectSearchArea>(this->shim().FromSphere(*reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const*>(&coordinateSystem), *reinterpret_cast<Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialSphere const*>(&sphere)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Azure::ObjectAnchors
{
    inline AccountInformation::AccountInformation(winrt::guid const& accountId, param::hstring const& accountKey, param::hstring const& accountDomain) :
        AccountInformation(impl::call_factory<AccountInformation, IAccountInformationFactory>([&](IAccountInformationFactory const& f) { return f.CreateInstance(accountId, accountKey, accountDomain); }))
    {
    }
    inline ObjectAnchorsSession::ObjectAnchorsSession(Microsoft::Azure::ObjectAnchors::AccountInformation const& accountInformation) :
        ObjectAnchorsSession(impl::call_factory<ObjectAnchorsSession, IObjectAnchorsSessionFactory>([&](IObjectAnchorsSessionFactory const& f) { return f.CreateInstance(accountInformation); }))
    {
    }
    inline auto ObjectObserver::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IObjectObserverStatics const&), ObjectObserver, IObjectObserverStatics>([](IObjectObserverStatics const& f) { return f.IsSupported(); });
    }
    inline auto ObjectObserver::RequestAccessAsync()
    {
        return impl::call_factory_cast<Windows::Foundation::IAsyncOperation<Microsoft::Azure::ObjectAnchors::ObjectObserverAccessStatus>(*)(IObjectObserverStatics const&), ObjectObserver, IObjectObserverStatics>([](IObjectObserverStatics const& f) { return f.RequestAccessAsync(); });
    }
    inline ObjectQuery::ObjectQuery(Microsoft::Azure::ObjectAnchors::ObjectModel const& model) :
        ObjectQuery(impl::call_factory<ObjectQuery, IObjectQueryFactory>([&](IObjectQueryFactory const& f) { return f.CreateInstance(model); }))
    {
    }
    inline ObjectQuery::ObjectQuery(Microsoft::Azure::ObjectAnchors::ObjectModel const& model, Microsoft::Azure::ObjectAnchors::ObjectObservationMode const& observationMode) :
        ObjectQuery(impl::call_factory<ObjectQuery, IObjectQueryFactory>([&](IObjectQueryFactory const& f) { return f.CreateInstance2(model, observationMode); }))
    {
    }
    inline auto ObjectSearchArea::FromLocation(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Windows::Foundation::Numerics::float3 const& position, Windows::Foundation::Numerics::quaternion const& orientation)
    {
        return impl::call_factory<ObjectSearchArea, IObjectSearchAreaStatics>([&](IObjectSearchAreaStatics const& f) { return f.FromLocation(coordinateSystem, position, orientation); });
    }
    inline auto ObjectSearchArea::FromFieldOfView(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialFieldOfView const& fieldOfView)
    {
        return impl::call_factory<ObjectSearchArea, IObjectSearchAreaStatics>([&](IObjectSearchAreaStatics const& f) { return f.FromFieldOfView(coordinateSystem, fieldOfView); });
    }
    inline auto ObjectSearchArea::FromOrientedBox(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox const& bounds)
    {
        return impl::call_factory<ObjectSearchArea, IObjectSearchAreaStatics>([&](IObjectSearchAreaStatics const& f) { return f.FromOrientedBox(coordinateSystem, bounds); });
    }
    inline auto ObjectSearchArea::FromSphere(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialSphere const& sphere)
    {
        return impl::call_factory<ObjectSearchArea, IObjectSearchAreaStatics>([&](IObjectSearchAreaStatics const& f) { return f.FromSphere(coordinateSystem, sphere); });
    }
    template <typename L> ObjectInstanceChangedHandler::ObjectInstanceChangedHandler(L handler) :
        ObjectInstanceChangedHandler(impl::make_delegate<ObjectInstanceChangedHandler>(std::forward<L>(handler)))
    {
    }
    template <typename F> ObjectInstanceChangedHandler::ObjectInstanceChangedHandler(F* handler) :
        ObjectInstanceChangedHandler([=](auto&&... args) { return handler(args...); })
    {
    }
    template <typename O, typename M> ObjectInstanceChangedHandler::ObjectInstanceChangedHandler(O* object, M method) :
        ObjectInstanceChangedHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
    {
    }
    template <typename O, typename M> ObjectInstanceChangedHandler::ObjectInstanceChangedHandler(com_ptr<O>&& object, M method) :
        ObjectInstanceChangedHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
    {
    }
    template <typename O, typename M> ObjectInstanceChangedHandler::ObjectInstanceChangedHandler(weak_ref<O>&& object, M method) :
        ObjectInstanceChangedHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
    {
    }
    inline auto ObjectInstanceChangedHandler::operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedEventArgs const& args) const
    {
        check_hresult((*(impl::abi_t<ObjectInstanceChangedHandler>**)this)->Invoke(*(void**)(&sender), *(void**)(&args)));
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IAccountInformation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IAccountInformationFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IEnvironmentObservation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectAnchorsSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectAnchorsSessionFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectInstance> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectInstanceChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectModel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectObserverStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectQuery> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectQueryFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectSearchArea> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::IObjectSearchAreaStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::AccountInformation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::EnvironmentObservation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectAnchorsSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectInstance> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectInstancePlacement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectModel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectQuery> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Azure::ObjectAnchors::ObjectSearchArea> : winrt::impl::hash_base {};
#endif
}
#endif
