// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Microsoft_Azure_ObjectAnchors_SpatialGraph_2_H
#define WINRT_Microsoft_Azure_ObjectAnchors_SpatialGraph_2_H
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Microsoft.Azure.ObjectAnchors.SpatialGraph.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Azure::ObjectAnchors::SpatialGraph
{
    struct SpatialFieldOfView
    {
        Windows::Foundation::Numerics::float3 Position;
        Windows::Foundation::Numerics::quaternion Orientation;
        float FarDistance;
        float HorizontalFieldOfViewInDegrees;
        float AspectRatio;
    };
    inline bool operator==(SpatialFieldOfView const& left, SpatialFieldOfView const& right) noexcept
    {
        return left.Position == right.Position && left.Orientation == right.Orientation && left.FarDistance == right.FarDistance && left.HorizontalFieldOfViewInDegrees == right.HorizontalFieldOfViewInDegrees && left.AspectRatio == right.AspectRatio;
    }
    inline bool operator!=(SpatialFieldOfView const& left, SpatialFieldOfView const& right) noexcept
    {
        return !(left == right);
    }
    struct SpatialGraphCoordinateSystem
    {
        winrt::guid NodeId;
        Windows::Foundation::Numerics::float4x4 CoordinateSystemToNodeTransform;
    };
    inline bool operator==(SpatialGraphCoordinateSystem const& left, SpatialGraphCoordinateSystem const& right) noexcept
    {
        return left.NodeId == right.NodeId && left.CoordinateSystemToNodeTransform == right.CoordinateSystemToNodeTransform;
    }
    inline bool operator!=(SpatialGraphCoordinateSystem const& left, SpatialGraphCoordinateSystem const& right) noexcept
    {
        return !(left == right);
    }
    struct SpatialGraphLocation
    {
        winrt::guid NodeId;
        Windows::Foundation::Numerics::float3 Position;
        Windows::Foundation::Numerics::quaternion Orientation;
    };
    inline bool operator==(SpatialGraphLocation const& left, SpatialGraphLocation const& right) noexcept
    {
        return left.NodeId == right.NodeId && left.Position == right.Position && left.Orientation == right.Orientation;
    }
    inline bool operator!=(SpatialGraphLocation const& left, SpatialGraphLocation const& right) noexcept
    {
        return !(left == right);
    }
    struct SpatialOrientedBox
    {
        Windows::Foundation::Numerics::float3 Center;
        Windows::Foundation::Numerics::float3 Extents;
        Windows::Foundation::Numerics::quaternion Orientation;
    };
    inline bool operator==(SpatialOrientedBox const& left, SpatialOrientedBox const& right) noexcept
    {
        return left.Center == right.Center && left.Extents == right.Extents && left.Orientation == right.Orientation;
    }
    inline bool operator!=(SpatialOrientedBox const& left, SpatialOrientedBox const& right) noexcept
    {
        return !(left == right);
    }
    struct SpatialPose
    {
        Windows::Foundation::Numerics::float3 Position;
        Windows::Foundation::Numerics::quaternion Orientation;
    };
    inline bool operator==(SpatialPose const& left, SpatialPose const& right) noexcept
    {
        return left.Position == right.Position && left.Orientation == right.Orientation;
    }
    inline bool operator!=(SpatialPose const& left, SpatialPose const& right) noexcept
    {
        return !(left == right);
    }
    struct SpatialSphere
    {
        Windows::Foundation::Numerics::float3 Center;
        float Radius;
    };
    inline bool operator==(SpatialSphere const& left, SpatialSphere const& right) noexcept
    {
        return left.Center == right.Center && left.Radius == right.Radius;
    }
    inline bool operator!=(SpatialSphere const& left, SpatialSphere const& right) noexcept
    {
        return !(left == right);
    }
}
#endif
