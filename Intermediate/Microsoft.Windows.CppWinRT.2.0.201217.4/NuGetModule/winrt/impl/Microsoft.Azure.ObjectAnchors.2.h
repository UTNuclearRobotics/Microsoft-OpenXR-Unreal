// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Microsoft_Azure_ObjectAnchors_2_H
#define WINRT_Microsoft_Azure_ObjectAnchors_2_H
#include "winrt/impl/Microsoft.Azure.ObjectAnchors.SpatialGraph.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Microsoft.Azure.ObjectAnchors.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Azure::ObjectAnchors
{
    struct ObjectInstanceChangedHandler : Windows::Foundation::IUnknown
    {
        ObjectInstanceChangedHandler(std::nullptr_t = nullptr) noexcept {}
        ObjectInstanceChangedHandler(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        ObjectInstanceChangedHandler(ObjectInstanceChangedHandler const&) noexcept = default;
        ObjectInstanceChangedHandler(ObjectInstanceChangedHandler&&) noexcept = default;
        ObjectInstanceChangedHandler& operator=(ObjectInstanceChangedHandler const&) & noexcept = default;
        ObjectInstanceChangedHandler& operator=(ObjectInstanceChangedHandler&&) & noexcept = default;
        template <typename L> ObjectInstanceChangedHandler(L lambda);
        template <typename F> ObjectInstanceChangedHandler(F* function);
        template <typename O, typename M> ObjectInstanceChangedHandler(O* object, M method);
        template <typename O, typename M> ObjectInstanceChangedHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> ObjectInstanceChangedHandler(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::ObjectAnchors::ObjectInstanceChangedEventArgs const& args) const;
    };
    struct ObjectControlPoint
    {
        Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphLocation Location;
        Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialPose ModelCoordinate;
    };
    inline bool operator==(ObjectControlPoint const& left, ObjectControlPoint const& right) noexcept
    {
        return left.Location == right.Location && left.ModelCoordinate == right.ModelCoordinate;
    }
    inline bool operator!=(ObjectControlPoint const& left, ObjectControlPoint const& right) noexcept
    {
        return !(left == right);
    }
    struct ObjectInstanceState
    {
        Windows::Foundation::DateTime LastUpdatedTime;
        float SurfaceCoverage;
        Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphLocation Center;
        Windows::Foundation::Numerics::float3 ScaleChange;
    };
    inline bool operator==(ObjectInstanceState const& left, ObjectInstanceState const& right) noexcept
    {
        return left.LastUpdatedTime == right.LastUpdatedTime && left.SurfaceCoverage == right.SurfaceCoverage && left.Center == right.Center && left.ScaleChange == right.ScaleChange;
    }
    inline bool operator!=(ObjectInstanceState const& left, ObjectInstanceState const& right) noexcept
    {
        return !(left == right);
    }
    struct __declspec(empty_bases) AccountInformation : Microsoft::Azure::ObjectAnchors::IAccountInformation
    {
        AccountInformation(std::nullptr_t) noexcept {}
        AccountInformation(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IAccountInformation(ptr, take_ownership_from_abi) {}
        AccountInformation(winrt::guid const& accountId, param::hstring const& accountKey, param::hstring const& accountDomain);
        AccountInformation(AccountInformation const&) noexcept = default;
        AccountInformation(AccountInformation&&) noexcept = default;
        AccountInformation& operator=(AccountInformation const&) & noexcept = default;
        AccountInformation& operator=(AccountInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) EnvironmentObservation : Microsoft::Azure::ObjectAnchors::IEnvironmentObservation
    {
        EnvironmentObservation(std::nullptr_t) noexcept {}
        EnvironmentObservation(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IEnvironmentObservation(ptr, take_ownership_from_abi) {}
        EnvironmentObservation(EnvironmentObservation const&) noexcept = default;
        EnvironmentObservation(EnvironmentObservation&&) noexcept = default;
        EnvironmentObservation& operator=(EnvironmentObservation const&) & noexcept = default;
        EnvironmentObservation& operator=(EnvironmentObservation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectAnchorsSession : Microsoft::Azure::ObjectAnchors::IObjectAnchorsSession
    {
        ObjectAnchorsSession(std::nullptr_t) noexcept {}
        ObjectAnchorsSession(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectAnchorsSession(ptr, take_ownership_from_abi) {}
        explicit ObjectAnchorsSession(Microsoft::Azure::ObjectAnchors::AccountInformation const& accountInformation);
        ObjectAnchorsSession(ObjectAnchorsSession const&) noexcept = default;
        ObjectAnchorsSession(ObjectAnchorsSession&&) noexcept = default;
        ObjectAnchorsSession& operator=(ObjectAnchorsSession const&) & noexcept = default;
        ObjectAnchorsSession& operator=(ObjectAnchorsSession&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectInstance : Microsoft::Azure::ObjectAnchors::IObjectInstance,
        impl::require<ObjectInstance, Windows::Foundation::IClosable>
    {
        ObjectInstance(std::nullptr_t) noexcept {}
        ObjectInstance(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectInstance(ptr, take_ownership_from_abi) {}
        ObjectInstance(ObjectInstance const&) noexcept = default;
        ObjectInstance(ObjectInstance&&) noexcept = default;
        ObjectInstance& operator=(ObjectInstance const&) & noexcept = default;
        ObjectInstance& operator=(ObjectInstance&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectInstanceChangedEventArgs : Microsoft::Azure::ObjectAnchors::IObjectInstanceChangedEventArgs
    {
        ObjectInstanceChangedEventArgs(std::nullptr_t) noexcept {}
        ObjectInstanceChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectInstanceChangedEventArgs(ptr, take_ownership_from_abi) {}
        ObjectInstanceChangedEventArgs(ObjectInstanceChangedEventArgs const&) noexcept = default;
        ObjectInstanceChangedEventArgs(ObjectInstanceChangedEventArgs&&) noexcept = default;
        ObjectInstanceChangedEventArgs& operator=(ObjectInstanceChangedEventArgs const&) & noexcept = default;
        ObjectInstanceChangedEventArgs& operator=(ObjectInstanceChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectInstancePlacement : Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement
    {
        ObjectInstancePlacement(std::nullptr_t) noexcept {}
        ObjectInstancePlacement(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectInstancePlacement(ptr, take_ownership_from_abi) {}
        ObjectInstancePlacement(ObjectInstancePlacement const&) noexcept = default;
        ObjectInstancePlacement(ObjectInstancePlacement&&) noexcept = default;
        ObjectInstancePlacement& operator=(ObjectInstancePlacement const&) & noexcept = default;
        ObjectInstancePlacement& operator=(ObjectInstancePlacement&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectModel : Microsoft::Azure::ObjectAnchors::IObjectModel,
        impl::require<ObjectModel, Windows::Foundation::IClosable>
    {
        ObjectModel(std::nullptr_t) noexcept {}
        ObjectModel(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectModel(ptr, take_ownership_from_abi) {}
        ObjectModel(ObjectModel const&) noexcept = default;
        ObjectModel(ObjectModel&&) noexcept = default;
        ObjectModel& operator=(ObjectModel const&) & noexcept = default;
        ObjectModel& operator=(ObjectModel&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectObserver : Microsoft::Azure::ObjectAnchors::IObjectObserver,
        impl::require<ObjectObserver, Windows::Foundation::IClosable>
    {
        ObjectObserver(std::nullptr_t) noexcept {}
        ObjectObserver(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectObserver(ptr, take_ownership_from_abi) {}
        ObjectObserver(ObjectObserver const&) noexcept = default;
        ObjectObserver(ObjectObserver&&) noexcept = default;
        ObjectObserver& operator=(ObjectObserver const&) & noexcept = default;
        ObjectObserver& operator=(ObjectObserver&&) & noexcept = default;
        static auto IsSupported();
        static auto RequestAccessAsync();
    };
    struct __declspec(empty_bases) ObjectQuery : Microsoft::Azure::ObjectAnchors::IObjectQuery,
        impl::require<ObjectQuery, Windows::Foundation::IClosable>
    {
        ObjectQuery(std::nullptr_t) noexcept {}
        ObjectQuery(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectQuery(ptr, take_ownership_from_abi) {}
        explicit ObjectQuery(Microsoft::Azure::ObjectAnchors::ObjectModel const& model);
        ObjectQuery(Microsoft::Azure::ObjectAnchors::ObjectModel const& model, Microsoft::Azure::ObjectAnchors::ObjectObservationMode const& observationMode);
        ObjectQuery(ObjectQuery const&) noexcept = default;
        ObjectQuery(ObjectQuery&&) noexcept = default;
        ObjectQuery& operator=(ObjectQuery const&) & noexcept = default;
        ObjectQuery& operator=(ObjectQuery&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectSearchArea : Microsoft::Azure::ObjectAnchors::IObjectSearchArea
    {
        ObjectSearchArea(std::nullptr_t) noexcept {}
        ObjectSearchArea(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::ObjectAnchors::IObjectSearchArea(ptr, take_ownership_from_abi) {}
        ObjectSearchArea(ObjectSearchArea const&) noexcept = default;
        ObjectSearchArea(ObjectSearchArea&&) noexcept = default;
        ObjectSearchArea& operator=(ObjectSearchArea const&) & noexcept = default;
        ObjectSearchArea& operator=(ObjectSearchArea&&) & noexcept = default;
        static auto FromLocation(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Windows::Foundation::Numerics::float3 const& position, Windows::Foundation::Numerics::quaternion const& orientation);
        static auto FromFieldOfView(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialFieldOfView const& fieldOfView);
        static auto FromOrientedBox(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialOrientedBox const& bounds);
        static auto FromSphere(Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialGraphCoordinateSystem const& coordinateSystem, Microsoft::Azure::ObjectAnchors::SpatialGraph::SpatialSphere const& sphere);
    };
}
#endif
